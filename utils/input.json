{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# üß© AI, ML og DL: Forst√• begrepsjungelen\n",
        "\n",
        "## L√¶ringsm√•l\n",
        "- Forst√• forskjellen mellom AI, maskinl√¶ring og dypl√¶ring\n",
        "- Se hvordan begrepene henger sammen hierarkisk\n",
        "- Kjenne til praktiske eksempler innen hver kategori\n",
        "- Forst√• n√•r og hvorfor vi bruker forskjellige tiln√¶rminger\n",
        "- Relatere begrepene til helsevesenet"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from matplotlib.patches import Circle, Rectangle\n",
        "import seaborn as sns\n",
        "\n",
        "print(\"üß© La oss rydde opp i begrepsjungelen!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## üéØ Hovedproblemet: Begrepene blandes ofte sammen\n",
        "\n",
        "Du har sikkert h√∏rt disse begrepene brukt om hverandre:\n",
        "- **Kunstig Intelligens (AI)**\n",
        "- **Maskinl√¶ring (ML/Machine Learning)**\n",
        "- **Dypl√¶ring (DL/Deep Learning)**\n",
        "\n",
        "Men de er **ikke** det samme! La oss se p√• hvordan de henger sammen."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Visualiser forholdet mellom AI, ML og DL\n",
        "fig, ax = plt.subplots(figsize=(12, 10))\n",
        "\n",
        "# Lag konsentriske sirkler for √• vise hierarkiet\n",
        "ai_circle = Circle((0.5, 0.5), 0.45, fill=False, linewidth=3, edgecolor='red', alpha=0.8)\n",
        "ml_circle = Circle((0.5, 0.5), 0.3, fill=False, linewidth=3, edgecolor='blue', alpha=0.8)\n",
        "dl_circle = Circle((0.5, 0.5), 0.15, fill=False, linewidth=3, edgecolor='green', alpha=0.8)\n",
        "\n",
        "ax.add_patch(ai_circle)\n",
        "ax.add_patch(ml_circle)\n",
        "ax.add_patch(dl_circle)\n",
        "\n",
        "# Legg til tekst\n",
        "ax.text(0.5, 0.9, 'KUNSTIG INTELLIGENS (AI)', ha='center', va='center', \n",
        "        fontsize=16, fontweight='bold', color='red')\n",
        "ax.text(0.5, 0.75, 'Maskiner som kan utf√∏re oppgaver\\nsom krever \"intelligens\"', \n",
        "        ha='center', va='center', fontsize=11, style='italic')\n",
        "\n",
        "ax.text(0.5, 0.6, 'MASKINL√ÜRING (ML)', ha='center', va='center', \n",
        "        fontsize=14, fontweight='bold', color='blue')\n",
        "ax.text(0.5, 0.52, 'Systemer som l√¶rer fra data\\nuten eksplisitt programmering', \n",
        "        ha='center', va='center', fontsize=10, style='italic')\n",
        "\n",
        "ax.text(0.5, 0.35, 'DYPL√ÜRING (DL)', ha='center', va='center', \n",
        "        fontsize=12, fontweight='bold', color='green')\n",
        "ax.text(0.5, 0.25, 'Nevrale nettverk med\\nmange lag', \n",
        "        ha='center', va='center', fontsize=9, style='italic')\n",
        "\n",
        "# Eksempler utenfor sirklene\n",
        "ax.text(0.1, 0.8, 'Ekspertsystemer\\nRegelbaserte systemer\\nS√∏kealgoritmer', \n",
        "        ha='left', va='center', fontsize=9, \n",
        "        bbox=dict(boxstyle='round,pad=0.3', facecolor='pink', alpha=0.3))\n",
        "\n",
        "ax.text(0.85, 0.65, 'Beslutningstr√¶r\\nSVM\\nNaive Bayes', \n",
        "        ha='left', va='center', fontsize=9,\n",
        "        bbox=dict(boxstyle='round,pad=0.3', facecolor='lightblue', alpha=0.3))\n",
        "\n",
        "ax.text(0.75, 0.25, 'CNN\\nRNN\\nTransformers', \n",
        "        ha='left', va='center', fontsize=9,\n",
        "        bbox=dict(boxstyle='round,pad=0.3', facecolor='lightgreen', alpha=0.3))\n",
        "\n",
        "ax.set_xlim(0, 1)\n",
        "ax.set_ylim(0, 1)\n",
        "ax.set_aspect('equal')\n",
        "ax.axis('off')\n",
        "ax.set_title('Forholdet mellom AI, ML og DL', fontsize=18, fontweight='bold', pad=20)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"üí° N√∏kkelpunkt: Dypl√¶ring ‚äÜ Maskinl√¶ring ‚äÜ Kunstig Intelligens\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## ü§ñ Kunstig Intelligens (AI) - Det store bildet\n",
        "\n",
        "### Definisjon\n",
        "**AI er evnen til maskiner √• utf√∏re oppgaver som tradisjonelt krever menneskelig intelligens.**\n",
        "\n",
        "### Kjennetegn\n",
        "- Probleml√∏sning\n",
        "- Resonnering\n",
        "- L√¶ring\n",
        "- Persepsjon\n",
        "- Spr√•kforst√•else"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# AI-kategorier og eksempler\n",
        "ai_kategorier = pd.DataFrame({\n",
        "    'Kategori': ['Regelbaserte systemer', 'Maskinl√¶ring', 'Ekspertsystemer', 'S√∏kealgoritmer'],\n",
        "    'Beskrivelse': [\n",
        "        'F√∏lger forh√•ndsdefinerte regler',\n",
        "        'L√¶rer m√∏nstre fra data',\n",
        "        'Simulerer ekspertise innen domene',\n",
        "        'Finner optimale l√∏sninger'\n",
        "    ],\n",
        "    'Helse_eksempel': [\n",
        "        'Medisindosering basert p√• vekt/alder',\n",
        "        'Bildeanalyse for kreftdiagnose',\n",
        "        'MYCIN for antibiotika-valg',\n",
        "        'Optimalisering av operasjonsplaner'\n",
        "    ],\n",
        "    'Kompleksitet': [2, 8, 5, 4]\n",
        "})\n",
        "\n",
        "print(\"üéØ AI-kategorienes mangfold:\")\n",
        "display(ai_kategorier)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Visualiser AI-kategorier etter kompleksitet\n",
        "plt.figure(figsize=(12, 6))\n",
        "colors = ['lightcoral', 'steelblue', 'orange', 'lightgreen']\n",
        "\n",
        "bars = plt.bar(ai_kategorier['Kategori'], ai_kategorier['Kompleksitet'], \n",
        "               color=colors, alpha=0.7, edgecolor='black')\n",
        "\n",
        "plt.ylabel('Kompleksitet (1-10)', fontweight='bold')\n",
        "plt.title('AI-tiln√¶rminger rangert etter kompleksitet', fontweight='bold', pad=20)\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "plt.grid(True, alpha=0.3)\n",
        "\n",
        "# Legg til verdier p√• toppen av stolpene\n",
        "for bar, value in zip(bars, ai_kategorier['Kompleksitet']):\n",
        "    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, \n",
        "             str(value), ha='center', va='bottom', fontweight='bold')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"üìä Maskinl√¶ring er den mest komplekse AI-tiln√¶rmingen!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## üß† Maskinl√¶ring (ML) - AI som l√¶rer\n",
        "\n",
        "### Definisjon\n",
        "**Maskinl√¶ring er en delmengde av AI hvor systemer l√¶rer og forbedrer seg automatisk fra erfaring (data) uten √• v√¶re eksplisitt programmert.**\n",
        "\n",
        "### Kjennetegn\n",
        "- L√¶rer fra data\n",
        "- Forbedrer prestasjon over tid\n",
        "- Generaliserer til nye situasjoner\n",
        "- Oppdager m√∏nstre autonomt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# ML-typer og deres egenskaper\n",
        "ml_typer = pd.DataFrame({\n",
        "    'Type': ['Supervised Learning', 'Unsupervised Learning', 'Reinforcement Learning'],\n",
        "    'Databehov': ['Merkede data (input + output)', 'Umerkede data (kun input)', 'Milj√∏ med bel√∏nning/straff'],\n",
        "    'M√•l': ['Predikere utfall', 'Finne skjulte m√∏nstre', 'Optimalisere handlinger'],\n",
        "    'Helse_eksempel': [\n",
        "        'Predikere hjerteinfarkt fra EKG',\n",
        "        'Gruppere pasienter med like symptomer',\n",
        "        'Optimalisere medikamentdosering'\n",
        "    ]\n",
        "})\n",
        "\n",
        "print(\"üéì De tre hovedtypene av maskinl√¶ring:\")\n",
        "display(ml_typer)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Visualiser ML-l√¶ringsprosessen\n",
        "fig, axes = plt.subplots(1, 3, figsize=(15, 5))\n",
        "\n",
        "# Supervised Learning\n",
        "axes[0].scatter([1, 2, 3, 4], [2, 4, 6, 8], color='blue', s=100, alpha=0.7)\n",
        "axes[0].plot([1, 4], [2, 8], 'r--', linewidth=2, label='L√¶rd modell')\n",
        "axes[0].set_title('Supervised Learning\\n(L√¶r fra eksempler)', fontweight='bold')\n",
        "axes[0].set_xlabel('Input (f.eks. alder)')\n",
        "axes[0].set_ylabel('Output (f.eks. risiko)')\n",
        "axes[0].legend()\n",
        "axes[0].grid(True, alpha=0.3)\n",
        "\n",
        "# Unsupervised Learning\n",
        "np.random.seed(42)\n",
        "group1 = np.random.normal([2, 2], 0.5, (20, 2))\n",
        "group2 = np.random.normal([6, 6], 0.5, (20, 2))\n",
        "axes[1].scatter(group1[:, 0], group1[:, 1], color='red', alpha=0.7, s=50)\n",
        "axes[1].scatter(group2[:, 0], group2[:, 1], color='blue', alpha=0.7, s=50)\n",
        "axes[1].set_title('Unsupervised Learning\\n(Finn m√∏nstre)', fontweight='bold')\n",
        "axes[1].set_xlabel('Egenskap 1')\n",
        "axes[1].set_ylabel('Egenskap 2')\n",
        "axes[1].grid(True, alpha=0.3)\n",
        "\n",
        "# Reinforcement Learning\n",
        "states = range(5)\n",
        "rewards = [1, 3, 5, 8, 10]\n",
        "axes[2].bar(states, rewards, color='green', alpha=0.7)\n",
        "axes[2].set_title('Reinforcement Learning\\n(L√¶r fra bel√∏nning)', fontweight='bold')\n",
        "axes[2].set_xlabel('Handling')\n",
        "axes[2].set_ylabel('Bel√∏nning')\n",
        "axes[2].grid(True, alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"üîç Hver ML-type l√∏ser forskjellige typer problemer!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## üï∏Ô∏è Dypl√¶ring (DL) - ML med nevrale nettverk\n",
        "\n",
        "### Definisjon\n",
        "**Dypl√¶ring er en delmengde av maskinl√¶ring som bruker nevrale nettverk med mange lag (\"dype\" nettverk) for √• l√¶re komplekse m√∏nstre.**\n",
        "\n",
        "### Kjennetegn\n",
        "- Nevrale nettverk med mange lag\n",
        "- Automatisk feature engineering\n",
        "- H√•ndterer komplekse data (bilder, tekst, lyd)\n",
        "- Krever mye data og regnekraft"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# DL-arkitekturer og deres bruksomr√•der\n",
        "dl_arkitekturer = pd.DataFrame({\n",
        "    'Arkitektur': ['CNN\\n(Convolutional)', 'RNN\\n(Recurrent)', 'Transformer', 'GAN\\n(Generative)'],\n",
        "    'Best_for': ['Bilder', 'Sekvenser', 'Spr√•k', 'Generering'],\n",
        "    'Helse_eksempel': [\n",
        "        'R√∏ntgen-analyse',\n",
        "        'EKG-tolkning',\n",
        "        'Medisinsk rapportskriving',\n",
        "        'Syntetiske medisinske bilder'\n",
        "    ],\n",
        "    'Kompleksitet': [7, 6, 9, 8],\n",
        "    'Data_behov': ['H√∏y', 'Middels', 'Veldig h√∏y', 'H√∏y']\n",
        "})\n",
        "\n",
        "print(\"üèóÔ∏è Dypl√¶ring-arkitekturer og deres spesialiteter:\")\n",
        "display(dl_arkitekturer)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Visualiser et enkelt nevral nettverk\n",
        "fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "# Definer lag-posisjoner\n",
        "layer_positions = [1, 3, 5, 7]\n",
        "layer_sizes = [3, 5, 4, 2]\n",
        "layer_names = ['Input\\n(Pasient-data)', 'Skjult lag 1\\n(Feature detection)', \n",
        "               'Skjult lag 2\\n(Pattern recognition)', 'Output\\n(Diagnose)']\n",
        "\n",
        "# Tegn noder\n",
        "for i, (x, size, name) in enumerate(zip(layer_positions, layer_sizes, layer_names)):\n",
        "    y_positions = np.linspace(1, 7, size)\n",
        "    \n",
        "    for y in y_positions:\n",
        "        circle = Circle((x, y), 0.3, fill=True, color='lightblue', \n",
        "                       edgecolor='darkblue', alpha=0.7)\n",
        "        ax.add_patch(circle)\n",
        "    \n",
        "    # Legg til lag-navn\n",
        "    ax.text(x, 0.2, name, ha='center', va='center', fontsize=10, \n",
        "            fontweight='bold', rotation=0)\n",
        "\n",
        "# Tegn forbindelser mellom lag\n",
        "for i in range(len(layer_positions)-1):\n",
        "    x1, x2 = layer_positions[i], layer_positions[i+1]\n",
        "    size1, size2 = layer_sizes[i], layer_sizes[i+1]\n",
        "    \n",
        "    y1_positions = np.linspace(1, 7, size1)\n",
        "    y2_positions = np.linspace(1, 7, size2)\n",
        "    \n",
        "    for y1 in y1_positions:\n",
        "        for y2 in y2_positions:\n",
        "            ax.plot([x1+0.3, x2-0.3], [y1, y2], 'gray', alpha=0.3, linewidth=0.5)\n",
        "\n",
        "ax.set_xlim(0, 8)\n",
        "ax.set_ylim(0, 8)\n",
        "ax.set_aspect('equal')\n",
        "ax.axis('off')\n",
        "ax.set_title('Dypl√¶ring: Nevral nettverks-arkitektur', fontsize=16, fontweight='bold', pad=20)\n",
        "\n",
        "# Legg til forklarende tekst\n",
        "ax.text(4, 8.5, 'Informasjon flyter fra venstre til h√∏yre\\nHvert lag l√¶rer mer komplekse m√∏nstre', \n",
        "        ha='center', va='center', fontsize=12, style='italic',\n",
        "        bbox=dict(boxstyle='round,pad=0.5', facecolor='yellow', alpha=0.3))\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"üß† Hvert lag i nettverket l√¶rer √• gjenkjenne mer og mer komplekse m√∏nstre!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## üìä Sammenligning: N√•r bruker vi hva?\n",
        "\n",
        "La oss se p√• praktiske retningslinjer for valg av tiln√¶rming:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Sammenligning av tiln√¶rminger\n",
        "sammenligning = pd.DataFrame({\n",
        "    'Aspekt': ['Datamengde', 'Tolkbarhet', 'Regnekraft', 'Utviklingstid', 'N√∏yaktighet (komplekse data)'],\n",
        "    'Regelbasert AI': ['Lav', 'H√∏y', 'Lav', 'Kort', 'Lav'],\n",
        "    'Tradisjonell ML': ['Middels', 'Middels', 'Middels', 'Middels', 'Middels'],\n",
        "    'Dypl√¶ring': ['H√∏y', 'Lav', 'H√∏y', 'Lang', 'H√∏y']\n",
        "})\n",
        "\n",
        "print(\"‚öñÔ∏è Sammenligning av AI-tiln√¶rminger:\")\n",
        "display(sammenligning)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Visualiser beslutningsmatrise\n",
        "fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "# Sett opp data for heatmap\n",
        "metoder = ['Regelbasert AI', 'Tradisjonell ML', 'Dypl√¶ring']\n",
        "kriterier = ['Datamengde\\nbehov', 'Tolkbarhet', 'Regnekraft\\nbehov', 'Utviklingstid', 'N√∏yaktighet\\n(komplekse data)']\n",
        "\n",
        "# Numeriske verdier (1=lav, 2=middels, 3=h√∏y)\n",
        "verdier = np.array([\n",
        "    [1, 3, 1, 1, 1],  # Regelbasert\n",
        "    [2, 2, 2, 2, 2],  # Tradisjonell ML\n",
        "    [3, 1, 3, 3, 3]   # Dypl√¶ring\n",
        "])\n",
        "\n",
        "# Lag heatmap\n",
        "im = ax.imshow(verdier, cmap='RdYlGn_r', aspect='auto')\n",
        "\n",
        "# Sett opp etiketter\n",
        "ax.set_xticks(range(len(kriterier)))\n",
        "ax.set_yticks(range(len(metoder)))\n",
        "ax.set_xticklabels(kriterier)\n",
        "ax.set_yticklabels(metoder)\n",
        "\n",
        "# Roter x-etiketter for bedre lesbarhet\n",
        "plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n",
        "\n",
        "# Legg til verdier i cellene\n",
        "for i in range(len(metoder)):\n",
        "    for j in range(len(kriterier)):\n",
        "        value = verdier[i, j]\n",
        "        text_map = {1: 'LAV', 2: 'MIDDELS', 3: 'H√òY'}\n",
        "        text = ax.text(j, i, text_map[value], ha=\"center\", va=\"center\", \n",
        "                      color=\"white\", fontweight='bold')\n",
        "\n",
        "ax.set_title('Beslutningsmatrise: Hvilken AI-tiln√¶rming skal jeg velge?', \n",
        "             fontsize=14, fontweight='bold', pad=20)\n",
        "\n",
        "# Legg til colorbar\n",
        "cbar = plt.colorbar(im, ax=ax)\n",
        "cbar.set_label('Niv√• (1=Lav, 2=Middels, 3=H√∏y)', rotation=270, labelpad=20)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"üéØ Velg tiln√¶rming basert p√• dine krav og begrensninger!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## üè• Praktiske eksempler fra helsevesenet\n",
        "\n",
        "La oss se konkrete eksempler p√• hvordan hver tiln√¶rming brukes i helse:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Helse-eksempler kategorisert\n",
        "helse_eksempler = pd.DataFrame({\n",
        "    'Tiln√¶rming': ['Regelbasert AI'] * 3 + ['Tradisjonell ML'] * 3 + ['Dypl√¶ring'] * 3,\n",
        "    'Eksempel': [\n",
        "        'Medisindosering basert p√• vekt og alder',\n",
        "        'Allergi-varsling i EPJ',\n",
        "        'Prosedyre-sjekklister',\n",
        "        'Risikosk√•r for hjertesykdom',\n",
        "        'Pasient-segmentering',\n",
        "        'Prediktiv modelling for re-innleggelse',\n",
        "        'Bildeanalyse for kreftdiagnose',\n",
        "        'Naturlig spr√•kbehandling av journaler',\n",
        "        'Drug discovery med AI'\n",
        "    ],\n",
        "    'Kompleksitet': [2, 1, 1, 6, 5, 7, 9, 8, 10],\n",
        "    'Implementert_i_Norge': ['Ja', 'Ja', 'Ja', 'Delvis', 'Delvis', 'Nei', 'Pilot', 'Forskning', 'Forskning']\n",
        "})\n",
        "\n",
        "print(\"üè• AI i norsk helsevesen - fra enkelt til komplekst:\")\n",
        "display(helse_eksempler)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Visualiser implementeringsstatus i Norge\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n",
        "\n",
        "# Graf 1: Kompleksitet vs implementering\n",
        "colors_impl = {'Ja': 'green', 'Delvis': 'orange', 'Nei': 'red', \n",
        "               'Pilot': 'blue', 'Forskning': 'purple'}\n",
        "\n",
        "for status in helse_eksempler['Implementert_i_Norge'].unique():\n",
        "    data = helse_eksempler[helse_eksempler['Implementert_i_Norge'] == status]\n",
        "    ax1.scatter(data['Kompleksitet'], [1]*len(data), \n",
        "               c=colors_impl[status], label=status, s=100, alpha=0.7)\n",
        "\n",
        "ax1.set_xlabel('Kompleksitet (1-10)')\n",
        "ax1.set_ylabel('')\n",
        "ax1.set_title('AI-kompleksitet vs implementeringsstatus i Norge')\n",
        "ax1.legend()\n",
        "ax1.grid(True, alpha=0.3)\n",
        "ax1.set_yticks([])\n",
        "\n",
        "# Graf 2: Implementeringsstatus fordeling\n",
        "status_counts = helse_eksempler['Implementert_i_Norge'].value_counts()\n",
        "colors = [colors_impl[status] for status in status_counts.index]\n",
        "\n",
        "wedges, texts, autotexts = ax2.pie(status_counts.values, labels=status_counts.index, \n",
        "                                  autopct='%1.1f%%', colors=colors)\n",
        "ax2.set_title('Implementeringsstatus for AI i norsk helse')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"üìà Trend: Enkle AI-systemer er implementert, komplekse er under utvikling!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## üöÄ Case study: Bildeanalyse i radiologi\n",
        "\n",
        "La oss se hvordan forskjellige tiln√¶rminger ville l√∏se samme problem:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Case study: R√∏ntgen-analyse\n",
        "case_study = pd.DataFrame({\n",
        "    'Tiln√¶rming': ['Regelbasert', 'Tradisjonell ML', 'Dypl√¶ring'],\n",
        "    'Metode': [\n",
        "        'Forh√•ndsdefinerte terskelverdier for pixelintensitet',\n",
        "        'Feature engineering + klassifisering (SVM/Random Forest)',\n",
        "        'Convolutional Neural Networks (CNN)'\n",
        "    ],\n",
        "    'Fordeler': [\n",
        "        'Rask √• implementere, lett √• forst√•, deterministisk',\n",
        "        'Balanse mellom kompleksitet og tolkbarhet, moderat datakrav',\n",
        "        'H√∏y n√∏yaktighet, automatisk feature detection, generaliserer godt'\n",
        "    ],\n",
        "    'Ulemper': [\n",
        "        'Lav n√∏yaktighet, ikke robust for variasjon',\n",
        "        'Krever domenekspertise for features, begrenset kompleksitet',\n",
        "        'Krever mye data, \"black box\", h√∏y regnekraft'\n",
        "    ],\n",
        "    'Typisk_n√∏yaktighet': ['60-70%', '75-85%', '90-95%']\n",
        "})\n",
        "\n",
        "print(\"üîç Case study: R√∏ntgen-analyse for lungebetennelse\")\n",
        "for i, row in case_study.iterrows():\n",
        "    print(f\"\\n{row['Tiln√¶rming'].upper()}:\")\n",
        "    print(f\"  Metode: {row['Metode']}\")\n",
        "    print(f\"  Fordeler: {row['Fordeler']}\")\n",
        "    print(f\"  Ulemper: {row['Ulemper']}\")\n",
        "    print(f\"  Typisk n√∏yaktighet: {row['Typisk_n√∏yaktighet']}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Visualiser n√∏yaktighet vs kompleksitet trade-off\n",
        "plt.figure(figsize=(10, 8))\n",
        "\n",
        "tiln√¶rminger = ['Regelbasert', 'Tradisjonell ML', 'Dypl√¶ring']\n",
        "n√∏yaktighet = [65, 80, 92.5]  # Midtverdier\n",
        "kompleksitet = [2, 5, 9]\n",
        "utviklingstid = [1, 4, 8]  # M√•neder\n",
        "\n",
        "# Lag bubble chart\n",
        "colors = ['red', 'blue', 'green']\n",
        "plt.scatter(kompleksitet, n√∏yaktighet, s=[t*50 for t in utviklingstid], \n",
        "           c=colors, alpha=0.6, edgecolors='black')\n",
        "\n",
        "# Legg til etiketter\n",
        "for i, txt in enumerate(tiln√¶rminger):\n",
        "    plt.annotate(txt, (kompleksitet[i], n√∏yaktighet[i]), \n",
        "                xytext=(5, 5), textcoords='offset points',\n",
        "                fontsize=12, fontweight='bold')\n",
        "\n",
        "plt.xlabel('Kompleksitet √• implementere (1-10)', fontsize=12, fontweight='bold')\n",
        "plt.ylabel('Forventet n√∏yaktighet (%)', fontsize=12, fontweight='bold')\n",
        "plt.title('Trade-off: Kompleksitet vs N√∏yaktighet vs Utviklingstid\\n(Bubble-st√∏rrelse = utviklingstid)', \n",
        "         fontsize=14, fontweight='bold', pad=20)\n",
        "plt.grid(True, alpha=0.3)\n",
        "\n",
        "# Legg til ideell sone\n",
        "plt.axhspan(85, 100, alpha=0.1, color='green', label='√ònsket n√∏yaktighetsomr√•de')\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"‚öñÔ∏è Valg av tiln√¶rming avhenger av dine prioriteringer: tid, n√∏yaktighet, eller enkelhet?\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## üéØ Beslutningsguide: Hvilken tiln√¶rming skal jeg velge?\n",
        "\n",
        "Bruk denne enkle beslutningsguiden:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def ai_beslutningsguide():\n",
        "    \"\"\"Interaktiv guide for √• velge AI-tiln√¶rming\"\"\"\n",
        "    print(\"ü§î AI Beslutningsguide - Svar p√• disse sp√∏rsm√•lene:\\n\")\n",
        "    \n",
        "    sp√∏rsm√•l = [\n",
        "        \"1. Hvor mye data har du tilgjengelig?\",\n",
        "        \"   a) Lite (< 1000 eksempler) ‚Üí Regelbasert\",\n",
        "        \"   b) Moderat (1000-100k) ‚Üí Tradisjonell ML\", \n",
        "        \"   c) Mye (> 100k) ‚Üí Kan vurdere dypl√¶ring\\n\",\n",
        "        \n",
        "        \"2. Hvor viktig er det √• forst√• hvordan systemet tar beslutninger?\",\n",
        "        \"   a) Kritisk (medisinsk diagnose) ‚Üí Regelbasert eller tolkbar ML\",\n",
        "        \"   b) Viktig ‚Üí Tradisjonell ML\",\n",
        "        \"   c) Mindre viktig ‚Üí Dypl√¶ring OK\\n\",\n",
        "        \n",
        "        \"3. Hvor komplekse er dataene dine?\",\n",
        "        \"   a) Enkle (tall, kategorier) ‚Üí Regelbasert/Tradisjonell ML\",\n",
        "        \"   b) Komplekse (bilder, tekst, lyd) ‚Üí Dypl√¶ring\\n\",\n",
        "        \n",
        "        \"4. Hvor mye tid/ressurser har du?\",\n",
        "        \"   a) Begrenset ‚Üí Regelbasert\",\n",
        "        \"   b) Moderat ‚Üí Tradisjonell ML\",\n",
        "        \"   c) God tid og ressurser ‚Üí Dypl√¶ring\\n\"\n",
        "    ]\n",
        "    \n",
        "    for sp√∏rsm√•l in sp√∏rsm√•l:\n",
        "        print(sp√∏rsm√•l)\n",
        "    \n",
        "    print(\"üí° ANBEFALING:\")\n",
        "    print(\"- Start ALLTID enkelt (regelbasert eller enkel ML)\")\n",
        "    print(\"- Bygg baseline f√∏rst, deretter forbedre\")\n",
        "    print(\"- Dypl√¶ring kun hvis du virkelig trenger det\")\n",
        "    print(\"- Husk: Et enkelt system som fungerer > komplekst system som ikke fungerer\")\n",
        "\n",
        "ai_beslutningsguide()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## üìö Oppsummering: N√∏kkelpunkter\n",
        "\n",
        "### üéØ Hovedforskjeller\n",
        "1. **AI ‚äÉ ML ‚äÉ DL** - Hierarkisk forhold\n",
        "2. **AI**: Bred kategori for \"intelligente\" systemer\n",
        "3. **ML**: Systemer som l√¶rer fra data\n",
        "4. **DL**: ML med dype nevrale nettverk\n",
        "\n",
        "### üè• I helsevesenet\n",
        "- **Regelbasert AI**: Medisindosering, allergivarsler\n",
        "- **Tradisjonell ML**: Risikosk√•r, pasientgruppering\n",
        "- **Dypl√¶ring**: Bildeanalyse, spr√•kbehandling\n",
        "\n",
        "### üí° Praktiske r√•d\n",
        "1. **Start enkelt** - bygg baseline f√∏rst\n",
        "2. **Vurder datamengde** - mer data = mer komplekse metoder\n",
        "3. **Tenk tolkbarhet** - kritisk i medisin\n",
        "4. **Ressurser** - dypl√¶ring krever tid og regnekraft"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Lag en oversikt over fremtidige trender\n",
        "fremtider_trender = pd.DataFrame({\n",
        "    'Trend': [\n",
        "        'Explainable AI (XAI)',\n",
        "        'AutoML',\n",
        "        'Federated Learning', \n",
        "        'Multimodal AI',\n",
        "        'Edge AI'\n",
        "    ],\n",
        "    'Beskrivelse': [\n",
        "        'AI som kan forklare sine beslutninger',\n",
        "        'Automatisert maskinl√¶ring-utvikling',\n",
        "        'L√¶ring uten √• dele sensitive data',\n",
        "        'Kombinerer tekst, bilder og sensorer',\n",
        "        'AI som kj√∏rer lokalt p√• enheter'\n",
        "    ],\n",
        "    'Relevans_for_helse': [\n",
        "        'Kritisk for medisinsk aksept',\n",
        "        'Senker barrieren for implementering',\n",
        "        'Beskytter pasientdata',\n",
        "        'Rikere pasientforst√•else',\n",
        "        'Sanntids-overv√•king'\n",
        "    ],\n",
        "    'Tidshorisont': ['1-2 √•r', '2-3 √•r', '3-5 √•r', '2-4 √•r', '1-3 √•r']\n",
        "})\n",
        "\n",
        "print(\"üîÆ Fremtidige AI-trender som vil p√•virke helse:\")\n",
        "display(fremtider_trender)\n",
        "\n",
        "print(\"\\nüåü Fremtiden: AI blir mer forklarlig, tilgjengelig og personvernvennlig!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## üìù Refleksjonsoppgaver\n",
        "\n",
        "### Diskusjonssp√∏rsm√•l\n",
        "1. **Hvorfor tror du dypl√¶ring har f√•tt s√• mye oppmerksomhet de siste √•rene?**\n",
        "\n",
        "2. **Hvilke situasjoner i helse ville du IKKE anbefale dypl√¶ring, og hvorfor?**\n",
        "\n",
        "3. **Hvordan kan vi balansere behovet for n√∏yaktige AI-systemer mot kravet om tolkbarhet?**\n",
        "\n",
        "### Praktisk √∏velse\n",
        "**Scenarioanalyse**: Du skal utvikle et AI-system for √•:\n",
        "- Varsle om potensielle legemiddelinteraksjoner\n",
        "- Analysere MRI-bilder for hjernesvulster\n",
        "- Optimalisere vaktplaner p√• sykehus\n",
        "\n",
        "For hvert scenario:\n",
        "1. Hvilken AI-tiln√¶rming ville du valgt?\n",
        "2. Begrunn valget ditt\n",
        "3. Hvilke utfordringer ser du?\n",
        "\n",
        "---\n",
        "\n",
        "**üéì Gratulerer! Du har n√• oversikt over AI-begrepsjungelen og kan navigere trygt mellom kunstig intelligens, maskinl√¶ring og dypl√¶ring!**"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "ai-helse",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
